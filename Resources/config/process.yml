definitions:
    synchronize_marketing_list_item_for_mailchimp_member:
        label:   'Synchronizes OroCRM Marketing List Item for MailChimp Member'
        enabled: true
        entity:  OroCRM\Bundle\MailChimpBundle\Entity\Member
        exclude_definitions: [synchronize_marketing_list_item_for_mailchimp_member]
        actions_configuration:
            - @tree:
                conditions:
                    @not_empty: $subscribersList.marketingList
                actions:
                    - @assign_constant_value:
                        attribute: $.statusCleaned
                        value: OroCRM\Bundle\MailChimpBundle\Entity\Member::STATUS_CLEANED
                    - @assign_constant_value:
                        attribute: $.statusUnsubscribed
                        value: OroCRM\Bundle\MailChimpBundle\Entity\Member::STATUS_UNSUBSCRIBED
                    - @create_datetime:
                        attribute: $.lastContactedAt
                    - @create_entity: # create OroCRM Marketing List Item
                        conditions: # if OroCRM Marketing List Item not exists
                            @empty: $marketingListItem
                        parameters:
                            class:     OroCRM\Bundle\MarketingListBundle\Entity\MarketingListItem
                            attribute: $marketingListItem
                            data:
                                entityId:       $id
                                marketingList:  $subscribersList.marketingList
                                contactedTimes: 0
                                lastContactedAt: $.lastContactedAt
                    # Create or remove Marketing List Removed Item depending on status of member
                    - @find_entity: # Find Marketing List Removed Item
                        class: OroCRM\Bundle\MarketingListBundle\Entity\MarketingListRemovedItem
                        where:
                            entityId: $id
                            marketingList: $subscribersList.marketingList.id
                        attribute: $.marketingListRemovedItem
                    - @create_entity: # create OroCRM Marketing List Removed Item
                        conditions: # if Member status equals "cleaned" and Marketing List Removed Item doesn't exist
                            @and:
                                - @equal: [$status, $.statusCleaned]
                                - @empty: $.marketingListRemovedItem
                        parameters:
                            class:     OroCRM\Bundle\MarketingListBundle\Entity\MarketingListRemovedItem
                            attribute: $.marketingListRemovedItem
                            data:
                                entityId:       $id
                                marketingList:  $subscribersList.marketingList
                    - @remove_entity: # remove OroCRM Marketing List Removed Item
                        conditions: # if Member status not equals "cleaned" and Marketing List Removed Item exists
                            @and:
                                - @not_equal: [$status, $.statusCleaned]
                                - @not_empty: $.marketingListRemovedItem
                        parameters: [$.marketingListRemovedItem]
                    # Create or remove Marketing List Unsubscribed Item depending on status of member
                    - @find_entity: # Find Marketing List Unsubscribed Item
                        class: OroCRM\Bundle\MarketingListBundle\Entity\MarketingListUnsubscribedItem
                        where:
                            entityId: $id
                            marketingList: $subscribersList.marketingList.id
                        attribute: $.marketingListUnsubscribedItem
                    - @create_entity: # create OroCRM Marketing List Unsubscribed Item
                        conditions: # if Member status equals "unsubscribed" and Marketing List Unsubscribed Item doesn't exist
                            @and:
                                - @equal: [$status, $.statusUnsubscribed]
                                - @empty: $.marketingListUnsubscribedItem
                        parameters:
                            class:     OroCRM\Bundle\MarketingListBundle\Entity\MarketingListUnsubscribedItem
                            attribute: $.marketingListUnsubscribedItem
                            data:
                                entityId:       $id
                                marketingList:  $subscribersList.marketingList
                    - @remove_entity: # remove OroCRM Marketing List Unsubscribed Item
                        conditions: # if Member status not equals "unsubscribed" and Marketing List Unsubscribed Item exists
                            @and:
                                - @not_equal: [$status, $.statusUnsubscribed]
                                - @not_empty: $.marketingListUnsubscribedItem
                        parameters: [$.marketingListUnsubscribedItem]
    create_email_campaign_for_mailchimp_campaign:
        label:   Create Email Campaign for MailChimp Campaign
        enabled: true
        entity:  OroCRM\Bundle\MailChimpBundle\Entity\Campaign
        exclude_definitions: [create_email_campaign_for_mailchimp_campaign]
        actions_configuration:
            - @tree:
                actions:
                    # Prepare constants values
                    - @assign_constant_value:
                        attribute: $.statusSent
                        value: OroCRM\Bundle\MailChimpBundle\Entity\Campaign::STATUS_SENT
                    - @assign_constant_value:
                        attribute: $.scheduleManual
                        value: OroCRM\Bundle\CampaignBundle\Entity\EmailCampaign::SCHEDULE_MANUAL
                    - @assign_constant_value:
                        attribute: $.mailchimpTransport
                        value: OroCRM\Bundle\MailChimpBundle\Transport\MailChimpTransport::NAME
                    # Create OroCRM EmailCampaign
                    - @tree:
                        # If OroCRM EmailCampaign not exists and
                        # MailChimp Campaign relates to OroCRM MarketingList and
                        # MailChimp Campaign has "sent" status
                        conditions:
                            @and:
                                - @empty: $emailCampaign
                                - @not_empty: $staticSegment
                                - @not_empty: $staticSegment.marketingList
                                - @equal: [$status, 'sent']
                        actions:
                            - @create_entity: # Create OroCRM EmailCampaign
                                class:     OroCRM\Bundle\CampaignBundle\Entity\EmailCampaign
                                attribute: $emailCampaign
                                data:
                                    name: $title
                                    schedule: $.scheduleManual
                                    sent: true
                                    sentAt: $sendTime
                                    senderEmail: $fromEmail
                                    senderName: $fromName
                                    transport: $.mailchimpTransport
                                    owner: $channel.defaultUserOwner
                                    organization: $channel.defaultUserOwner.organization
                            - @create_entity: # Create MailChimpTransportSettings
                                class:     OroCRM\Bundle\MailChimpBundle\Entity\MailChimpTransportSettings
                                attribute: $emailCampaign.transportSettings
                                data:
                                    channel: $channel
                                    template: $template
triggers:
    synchronize_marketing_list_item_for_mailchimp_member:
        -
            event:    create
            queued:   true
        -
            event:    update
            queued:   true
            field:    status
    create_email_campaign_for_mailchimp_campaign:
        -
            event:    create
            queued:   true
